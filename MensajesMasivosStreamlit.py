{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5383cf08-ddcb-4bb4-94e9-f966050ff620",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-09 14:16:56.937 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-09 14:16:57.204 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\rbrodriguez\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-01-09 14:16:57.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-09 14:16:57.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-09 14:16:57.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-09 14:16:57.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-09 14:16:57.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-09 14:16:57.204 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from telethon import TelegramClient\n",
    "from telethon.errors import PeerIdInvalidError, UserPrivacyRestrictedError\n",
    "import asyncio\n",
    "import os\n",
    "import time\n",
    "\n",
    "# Configurar las credenciales de Telegram\n",
    "api_id = '21303180'\n",
    "api_hash = 'cde3b0d89333b9821c557f3ef3d52a0a'\n",
    "phone = '+59175810102'\n",
    "\n",
    "# Función para enviar mensajes\n",
    "async def enviar_mensajes(data_filtrada, imagen_path):\n",
    "    start_time = time.time()\n",
    "    client = TelegramClient('session_name', api_id, api_hash)\n",
    "    await client.start(phone)\n",
    "    \n",
    "    for _, row in data_filtrada.iterrows():\n",
    "        numero = row['Número']\n",
    "        vendedor = row['Vendedor']\n",
    "        mensaje = f\"Hola {vendedor}, aquí están los descuentos y promociones para tu ruta {row['Ruta']}.\"\n",
    "\n",
    "        try:\n",
    "            receiver = await client.get_entity(numero)\n",
    "            await client.send_message(receiver, mensaje)\n",
    "            await client.send_file(receiver, imagen_path)\n",
    "            st.success(f\"Mensaje enviado a {vendedor} ({numero}).\")\n",
    "        except PeerIdInvalidError:\n",
    "            st.error(f\"Error: El número {numero} no está disponible en Telegram.\")\n",
    "        except UserPrivacyRestrictedError:\n",
    "            st.error(f\"Error: {numero} tiene restricciones de privacidad.\")\n",
    "        except Exception as e:\n",
    "            st.error(f\"Error inesperado al enviar a {vendedor} ({numero}): {e}\")\n",
    "    \n",
    "    await client.disconnect()\n",
    "    st.write(f\"Mensajes enviados y cliente desconectado. Tiempo total: {time.time() - start_time:.2f} segundos.\")\n",
    "\n",
    "# Interfaz de usuario con Streamlit\n",
    "st.title(\"Envío de Mensajes Masivos por Telegram\")\n",
    "\n",
    "# Paso 1: Subir archivo Excel\n",
    "excel_file = st.file_uploader(\"Sube el archivo Excel\", type=[\"xlsx\"])\n",
    "if excel_file:\n",
    "    data = pd.read_excel(excel_file)\n",
    "    data['Ciudad'] = data['Ciudad'].str.strip().str.lower()\n",
    "    data['Canal'] = data['Canal'].astype(str).str.strip()\n",
    "    data['Ruta'] = data['Ruta'].str.strip().str.lower()\n",
    "    data['Número'] = data['Número'].astype(str).str.strip()\n",
    "    data['Vendedor'] = data['Vendedor'].str.strip()\n",
    "    \n",
    "    st.write(\"Datos cargados correctamente:\")\n",
    "    st.dataframe(data)\n",
    "\n",
    "    # Paso 2: Filtrar datos\n",
    "    ciudad = st.text_input(\"Filtrar por ciudad (opcional):\").strip().lower()\n",
    "    canal = st.text_input(\"Filtrar por canal (opcional):\").strip()\n",
    "    ruta = st.text_input(\"Filtrar por ruta (opcional):\").strip().lower()\n",
    "\n",
    "    filtros = []\n",
    "    if ciudad:\n",
    "        filtros.append(data['Ciudad'] == ciudad)\n",
    "    if canal:\n",
    "        filtros.append(data['Canal'] == canal)\n",
    "    if ruta:\n",
    "        filtros.append(data['Ruta'] == ruta)\n",
    "\n",
    "    if filtros:\n",
    "        data_filtrada = data.loc[pd.concat(filtros, axis=1).all(axis=1)]\n",
    "    else:\n",
    "        data_filtrada = data\n",
    "\n",
    "    if not data_filtrada.empty:\n",
    "        st.write(\"Vendedores seleccionados:\")\n",
    "        st.dataframe(data_filtrada)\n",
    "\n",
    "        # Paso 3: Subir imagen\n",
    "        imagen_file = st.file_uploader(\"Sube la imagen a enviar\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
    "        if imagen_file:\n",
    "            imagen_path = f\"temp_{imagen_file.name}\"\n",
    "            with open(imagen_path, \"wb\") as f:\n",
    "                f.write(imagen_file.getbuffer())\n",
    "            st.success(\"Imagen cargada correctamente.\")\n",
    "\n",
    "            # Paso 4: Enviar mensajes\n",
    "            if st.button(\"Enviar mensajes\"):\n",
    "                asyncio.run(enviar_mensajes(data_filtrada, imagen_path))\n",
    "                os.remove(imagen_path)\n",
    "    else:\n",
    "        st.error(\"No se encontraron vendedores con los criterios especificados.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "60b7dd40-8524-4aca-ade4-35f250d2036d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (streamlit_env)",
   "language": "python",
   "name": "streamlit_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
